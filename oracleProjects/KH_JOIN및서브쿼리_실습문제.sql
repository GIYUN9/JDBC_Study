-- 1. 70년대 생(1970~1979)중 여자이면서 전씨인 사원의 이름과 주민번호, 부서명, 직급조회
SELECT EMP_NAME, EMP_NO, D.DEPT_TITLE, JOB_NAME
FROM EMPLOYEE E, DEPARTMENT D, JOB J
WHERE E.DEPT_CODE = D.DEPT_ID AND E.JOB_CODE = J.JOB_CODE
    AND SUBSTR(EMP_NO,1,1)= '7' AND EMP_NAME LIKE '전%';

-- 2. 나이 상 가장 막내의 사원코드, 사원명, 나이, 부서명, 직급명 조회
SELECT DEPT_CODE, EMP_NAME, 나이, DEPT_TITLE, JOB_NAME
FROM (SELECT DEPT_CODE, EMP_NAME, EXTRACT(YEAR FROM SYSDATE) - EXTRACT(YEAR FROM TO_DATE(SUBSTR(EMP_NO, 1, 2), 'RRRR')) 나이, DEPT_TITLE, JOB_NAME
        FROM EMPLOYEE E, DEPARTMENT D, JOB J
        WHERE E.DEPT_CODE = D.DEPT_ID AND E.JOB_CODE = J.JOB_CODE
        ORDER BY 나이)
WHERE ROWNUM = 1;

-- 3. 이름에 '형'이 들어가는 사원의 사원코드, 사원명, 직급조회
SELECT EMP_ID, EMP_NAME, JOB.JOB_NAME
FROM EMPLOYEE
JOIN JOB ON EMPLOYEE.JOB_CODE = JOB.JOB_CODE
WHERE EMP_NAME LIKE '%형%';

-- 4. 부서코드가 D5이거나 D6인 사원의 사원명, 직급명, 부서코드 부서명 조회
SELECT EMP_NAME, JOB_NAME, E.DEPT_CODE, D.DEPT_TITLE
FROM EMPLOYEE E
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
JOIN DEPARTMENT D ON E.DEPT_CODE = D.DEPT_ID
WHERE E.DEPT_CODE IN ('D5', 'D6')
ORDER BY 3 DESC;

-- 5.보너스를 받는 사원의 사원명, 부서명, 지역명 조회
SELECT EMP_NAME, BONUS, D.DEPT_TITLE, L.LOCAL_NAME
FROM EMPLOYEE E
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
JOIN DEPARTMENT D ON E.DEPT_CODE = D.DEPT_ID
JOIN LOCATION L ON D.LOCATION_ID = L.LOCAL_CODE
WHERE E.BONUS IS NOT NULL;

-- 6. 사원명, 직급명, 부서명, 지역명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE E
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
JOIN DEPARTMENT D ON E.DEPT_CODE= D.DEPT_ID
JOIN LOCATION L ON D.LOCATION_ID = L.LOCAL_CODE;

-- 7. 한국이나 일본에서 근무 중인 사원의 사원명, 부서명, 지역명, 국가명 조회
SELECT EMP_NAME, DEPT_TITLE, LOCAL_NAME, NATIONAL_NAME
FROM EMPLOYEE E
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
JOIN DEPARTMENT D ON E.DEPT_CODE= D.DEPT_ID
JOIN LOCATION L ON D.LOCATION_ID = L.LOCAL_CODE
JOIN NATIONAL N ON L.NATIONAL_CODE = N.NATIONAL_CODE
WHERE NATIONAL_NAME IN ('한국', '일본');

-- 8. 한 사원과 같은 부서에서 일하는 사원의 이름조회
SELECT D.EMP_NAME, E.DEPT_CODE, E.EMP_NAME
FROM EMPLOYEE E
JOIN EMPLOYEE D ON(E.DEPT_CODE = D.DEPT_CODE)
WHERE E.EMP_NAME != D.EMP_NAME
ORDER BY 1;

-- 9. 보너스가 없고 직급코드가 J4이거나 J7인 사원의 이름, 직급명, 급여 조회(NVL 이용)
SELECT EMP_NAME, JOB_NAME, (SALARY + (SALARY * NVL(BONUS, 0))) * 12 AS 급여
FROM EMPLOYEE E
JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
WHERE E.JOB_CODE IN ('J4', 'J7');

-- 10. 보너스 포함한 연봉이 높은 5명의 사번, 이름, 부서 명, 직급, 입사일 순위 조회
SELECT EMP_ID, EMP_NAME, DEPT_TITLE, JOB_NAME, HIRE_DATE, ROWNUM AS 순위
FROM (SELECT E.EMP_ID, EMP_NAME, D.DEPT_TITLE, J.JOB_NAME, E.HIRE_DATE
    FROM EMPLOYEE E
    JOIN JOB J ON E.JOB_CODE = J.JOB_CODE
    JOIN DEPARTMENT D ON E.DEPT_CODE = D.DEPT_ID
    ORDER BY ((SALARY + (SALARY * NVL(BONUS, 0))) * 12) DESC)
WHERE ROWNUM <= 5;

-- 11. 부서 별 급여 합계가 전체 급여 총 합의 20%보다 많은 부서의 부서명, 부서 별 급여합계 조회
-- 11-1. JOIN과 HAVING사용
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) > (SELECT SUM(SALARY) * 0.2
                      FROM EMPLOYEE);

-- 11-2. 인라인 뷰 사용
SELECT DEPT_TITLE, SSAL
FROM (SELECT DEPT_TITLE, SUM(SALARY) SSAL
      FROM EMPLOYEE
      LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
      GROUP BY DEPT_TITLE)
WHERE SSAL > (SELECT SUM(SALARY) * 0.2
              FROM EMPLOYEE);

-- 11-3. WITH 사용
WITH TOTAL_SAL AS (SELECT DEPT_TITLE, SUM(SALARY) SSAL
                   FROM EMPLOYEE
                   LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
                   GROUP BY DEPT_TITLE)
SELECT DEPT_TITLE, SSAL
FROM TOTAL_SAL
WHERE SSAL > (SELECT SUM(SALARY) * 0.2
              FROM EMPLOYEE);

---------------------답지에만 있던 문제
-- +. 2020년 12월 25일의 요일 조회
SELECT TO_CHAR(TO_DATE('20201225', 'YYYYMMDD'), 'DAY')
FROM DUAL;

-- ++. 부서 명과 부서 별 급여 합계 조회
SELECT DEPT_TITLE, SUM(SALARY) SSAL
FROM EMPLOYEE
LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;
 
-- +++. WITH를 이용하여 급여 합과 급여 평균 조회
-- +++-1)
WITH SUM_SAL AS (SELECT SUM(SALARY) FROM EMPLOYEE),
     AVG_SAL AS (SELECT AVG(SALARY) FROM EMPLOYEE)
SELECT * FROM SUM_SAL
UNION
SELECT * FROM AVG_SAL;
 
-- +++-2)
WITH SUM_SAL AS (SELECT SUM(SALARY) FROM EMPLOYEE),
     AVG_SAL AS (SELECT AVG(SALARY) FROM EMPLOYEE)
SELECT * 
FROM SUM_SAL, AVG_SAL;